{
    "collab_server" : "",
    "contents" : "#####################################################################################\n#######ANALYZE PHOTOS AND CONSOLIDATE DATA FOR ALL PHOTOS INTO ONE DATA FRAME\n#####################################################################################\n\n\n####gitter package is used to facilitate image analysis\nrequire(gitter)\n\n####Prepare folders and files for analysis\n\n##read in file containing array file names\narray_file_desc = read.table(\"array_file_desc.txt\",header=T)\n\n##import picture information from file\ndesc_image <- read.table(\"../Photos/photo_descriptions.txt\", sep=\"\\t\", header=T, colClasses = c(\"factor\"))\n\n\n##create the folder for the gridded images\ndir.create(\"gridded\")\n##delete any pre-existing gridded images\ndo.call(file.remove, list(list.files(\"gridded\", full.names = TRUE)))\n##create the folder for the analyzed data\ndir.create(\"analysis_files\")\n##delete any pre-existing analysis files\ndo.call(file.remove, list(list.files(\"analysis_files\", full.names = TRUE)))\n##note: it will print TRUE for each file removed, don't be concerned by this output\n\n####REAL ANALYSIS: Process the images to obtain size data \n\n##without reference image\ngitter.batch(image.files=paste(\"../Photos/all\", as.character(desc_image$FileName),sep = \"/\"),\n             plate.format=1536,\n             grid.save = \"gridded\",\n             dat.save =\"analysis_files\",\n             verbose='p')\n\n##example code for use with a ref image, do not use unless necessary\n##ref image\n# ref_image = \"../Photos/ref/test_-05-24-17_22-09-50.JPG\"\n# gitter.batch(image.files=\n# paste(\"../Photos/all\", as.character(desc_image$FileName), sep = \"/\") ,\n# ref.image.file=ref_image, plate.format=1536, grid.save = \"gridded\", dat.save =\n# \"analysis_files\", verbose='p')\n\n####Combine Information\n\n## Combine the Size Data with the descriptive information\n\n## process each line of the file individually. pick the data file, open it, read it and keep data.\n## we take each row from the the desc_image and read the name of the text file in this row. \n## Then we associate each of the text file with the information in desc_image\n\n## get the data using information from the desc_image file. this leads to image file etc.\n## we go through each row, we ask for the name of the file\n## and bind the information called data, selection, cond, time, colsizes to it\n\n#set the folder where the analysis.txt files are located as a subdirectory of the working directory\nfolder = \"analysis_files\"\n\n##create empty dataframe, must have same columns as array data frames and image_desc\ndf = data.frame(matrix(vector(), 0, 8, dimnames=list(\n  c(), c(\"Strain\",\"Column\", \"Row\", \"Size\", \"Media\",\"Temp\", \"TimePoint\",\"Array\"))))\n\n\nfor (i in 1:nrow(desc_image)){  #starting from first row, and go to last one (nrow) in file desc_image\n  fn = as.character(desc_image$FileName[i])\n  file = paste(fn,\"dat\",sep=\".\")\n  file = paste(folder,file,sep = \"/\")\n  data = read.table(file, sep=\"\\t\", header=F) #we take the filenames e.g. IMG_123.txt\n  \n  ##analyze the image to get size data\n\n  \n  ##add in info from image description\n  media = desc_image$Media[i]\n  time.point = desc_image$TimePointByHour[i]\n  temp = desc_image$Temp[i]\n  array_number = desc_image$Array[i]\n  \n\n  print(i) #printing each line we worked with after another makes sure that we went through all lines in the file\n  \n  ##we read the text files according to the filename under desc_image[i,1]\n  ##and stores the file in a new vector\n  strain_info_file = as.character(\n    array_file_desc$FileName[array_file_desc$Array == array_number]\n    )\n  \n  ##modify the file name to point to correct folder\n  strain_info_file = paste(\"../Arrays\",strain_info_file,sep=\"/\")\n  \n  ##read tha table containing which strains are in which row,column\n  info = read.table(strain_info_file,header=T,sep=\"\\t\")\n  \n\n  ##sort the colsizes so it matches the ordering in info\n  ##r 1 c 1, r1 c2, etc\n  \n  colsizes = data[,3]\n                            #row      #column\n  colsizes = colsizes[order(data[,1],data[,2])]\n  \n  info$Size = colsizes\n  \n  media = rep(media,nrow(info))\n  info$Media = media\n  time.point = rep(time.point,nrow(info))\n  info$Time.Point = time.point\n  temp = rep(temp,nrow(info))\n  info$Temp = temp\n  array_numbers = rep(array_number,nrow(info))\n  info$Array = array_numbers\n  \n  df = rbind(df,info)\n}\n\ndf$Time.Point = as.numeric(as.character(df$Time.Point))\n\nwrite.table(df, \"consolidated_data.txt\", sep = \"\\t\", row.names=F)\n\n",
    "created" : 1501858904522.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1581077068",
    "id" : "F6C007DE",
    "lastKnownWriteTime" : 1504286433,
    "last_content_update" : 1504286433653,
    "path" : "~/Sequencing_Research/Tools_&_Data/Robot Image Analysis Development/Robot Image Analysis 2.0.1/Analyze/consolidate_data.R",
    "project_path" : "consolidate_data.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}