print(ggplot(aes(Time.Point,Size),data=subSpot) +
geom_point() +
ggtitle(title)
)
##save the graph, user must have previously created "model_success_graphs" folder
ggsave(paste(title,"png",sep="."),path="model_failure_graphs")
return_vectors$CC[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$R[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$MinSize[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$Corr[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
print(paste('ERROR',subSpot$Gene,subSpot$Condition,subSpot$Well))
return(return_vectors)
}
##make folders for graphs
dir.create("model_success_graphs")
dir.create("model_failure_graphs")
##delete old graphs
do.call(file.remove, list(list.files("model_success_graphs", full.names = TRUE)))
do.call(file.remove, list(list.files("model_failure_graphs", full.names = TRUE)))
##start by getting a list of each unique condition
conditions = sort(unique(df$Condition))
for(condition in conditions){
##subset the data for that condition
subCondition = subset(df,df$Condition == condition)
##get a unique list of arrays in that condition
arrays = sort(unique(subCondition$Array))
for(array in arrays){
##subset the data for that specific array
subArray = subset(subCondition, subCondition$Array == array)
##get a unique list of strain names within that condition
strains = sort(unique(subArray$Gene))
for(strain in strains){
##subset the data for that specific strain
subStrain = subset(subArray, subArray$Gene == strain)
##get a unique list of spots
##each spot represents 1 technical replicate for that strain
spots = sort(unique(subStrain$Well))
for(spot in spots){
##data for all time points for a particular spot
subSpot = subset(subStrain, subStrain$Well == spot)
##sort by time point ascending
subSpot = subSpot[order(subSpot$Time.Point),]
##Turn values where size = 0 intonitial size = 1
##You can't have growth from a non-existent population so this causes model to fail
subSpot$Size[subSpot$Size == 0] = 1
##Run the functions to fit the model
##This will fill in the output vector with the data
##or with "OMIT" if an error is encountered
return_vectors = tryCatch(
normal_case(return_vectors,subSpot),
error = error_case)
}
}
}
}
require(ggplot2)
for(condition in conditions){
##subset the data for that condition
subCondition = subset(df,df$Condition == condition)
##get a unique list of arrays in that condition
arrays = sort(unique(subCondition$Array))
for(array in arrays){
##subset the data for that specific array
subArray = subset(subCondition, subCondition$Array == array)
##get a unique list of strain names within that condition
strains = sort(unique(subArray$Gene))
for(strain in strains){
##subset the data for that specific strain
subStrain = subset(subArray, subArray$Gene == strain)
##get a unique list of spots
##each spot represents 1 technical replicate for that strain
spots = sort(unique(subStrain$Well))
for(spot in spots){
##data for all time points for a particular spot
subSpot = subset(subStrain, subStrain$Well == spot)
##sort by time point ascending
subSpot = subSpot[order(subSpot$Time.Point),]
##Turn values where size = 0 intonitial size = 1
##You can't have growth from a non-existent population so this causes model to fail
subSpot$Size[subSpot$Size == 0] = 1
##Run the functions to fit the model
##This will fill in the output vector with the data
##or with "OMIT" if an error is encountered
return_vectors = tryCatch(
normal_case(return_vectors,subSpot),
error = error_case)
}
}
}
}
##Note: These vectors are character so that the OMITS can be includeded
##add the output vectors as columns to the output data.frame
out_df$CC = return_vectors$CC
out_df$R = return_vectors$R
out_df$MinSize= return_vectors$MinSize
out_df$Corr = return_vectors$Corr
out_df = out_df[,c(1,2,3,5,7,8,9,10,11,12,13,14)]
####Write the output to a tab delimited file
write.table(out_df,"logistic_growth.tab",row.names=F,sep="\t")
View(out_df)
View(out_df)
r = subset(out_df, Gene =="R")
View(r)
View(df)
View(df)
r = subset(df, Gene =="R")
r = subset(df, Gene =="R" & Time.Point < 69)
r = subset(df, Condition %in% c("CSM_30","CSM_37","CSMEG_30", "CSMEG_37","SOE_30","SOE_37") & Gene =="R" & Time.Point < 69)
old_out_df = out_df
old_df = df
df = r
##start by getting a list of each unique condition
conditions = sort(unique(df$Condition))
for(condition in conditions){
##subset the data for that condition
subCondition = subset(df,df$Condition == condition)
##get a unique list of arrays in that condition
arrays = sort(unique(subCondition$Array))
for(array in arrays){
##subset the data for that specific array
subArray = subset(subCondition, subCondition$Array == array)
##get a unique list of strain names within that condition
strains = sort(unique(subArray$Gene))
for(strain in strains){
##subset the data for that specific strain
subStrain = subset(subArray, subArray$Gene == strain)
##get a unique list of spots
##each spot represents 1 technical replicate for that strain
spots = sort(unique(subStrain$Well))
for(spot in spots){
##data for all time points for a particular spot
subSpot = subset(subStrain, subStrain$Well == spot)
##sort by time point ascending
subSpot = subSpot[order(subSpot$Time.Point),]
##Turn values where size = 0 intonitial size = 1
##You can't have growth from a non-existent population so this causes model to fail
subSpot$Size[subSpot$Size == 0] = 1
##Run the functions to fit the model
##This will fill in the output vector with the data
##or with "OMIT" if an error is encountered
return_vectors = tryCatch(
normal_case(return_vectors,subSpot),
error = error_case)
}
}
}
}
View(out_df)
##Note: These vectors are character so that the OMITS can be includeded
##add the output vectors as columns to the output data.frame
out_df$CC = return_vectors$CC
out_df$R = return_vectors$R
out_df$MinSize= return_vectors$MinSize
out_df$Corr = return_vectors$Corr
out_df = out_df[,c(1,2,3,5,7,8,9,10,11,12,13,14)]
View(out_df)
##Specify an output data frame to serve as a frame of reference
##the output data frame is identical to the initial data frame in format
##however, for each Strain, there will only be one row of data, instead of one for each time point
##So we subset the initial dataframe for just one time point
out_df = subset(df, df$Time.Point == 0)
View(out_df)
##Note: These vectors are character so that the OMITS can be includeded
##add the output vectors as columns to the output data.frame
out_df$CC = return_vectors$CC
out_df$R = return_vectors$R
##specify place holder vectors for our output variables
CC = vector(length=nrow(out_df)) ##carrying capacity
R = vector(length=nrow(out_df)) ##rate of growth
MinSize = vector(length = nrow(out_df)) ##initial population size
Corr = vector(length = nrow(out_df)) ##correlation of the model fit
##compile the place holder vectors into a single list
##so they can be passed through functions as a single variable
return_vectors = list(CC,R,MinSize,Corr)
names(return_vectors) = c("CC","R","MinSize","Corr") #add names
normal_case = function(rv,subSpot){
##fit the model by calling the log.fit function (separate R script)
fm = log.fit("Size","Time.Point",subSpot)
##fill in specific rows of the vectors of output data
##based on matching the correct row in the output data frame
rv$CC[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = fm[[1]][1] #Carrying capacity
rv$R[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = fm[[1]][2] #rate of growth
rv$MinSize[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = fm[[1]][3] #initial population size
rv$Corr[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = fm[[1]][4] #correlation
##return vectors of output data with output filled in
##for the specific condition, strain, and spot analyzed
return(rv)
}
error_case = function(err){
##we have to modify return_vectors directly here
##the error function in tryCatch has no clear way to accept them as a parameter
title = paste("Logistic Fit Failure",subSpot$Condition[1],subSpot$Gene[1],subSpot$Well[1])
print(ggplot(aes(Time.Point,Size),data=subSpot) +
geom_point() +
ggtitle(title)
)
##save the graph, user must have previously created "model_success_graphs" folder
ggsave(paste(title,"png",sep="."),path="model_failure_graphs")
return_vectors$CC[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$R[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$MinSize[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
return_vectors$Corr[out_df$Condition == condition &
out_df$Array == array &
out_df$Gene == strain &
out_df$Well == spot] = c("OMIT")
print(paste('ERROR',subSpot$Gene,subSpot$Condition,subSpot$Well))
return(return_vectors)
}
##make folders for graphs
dir.create("model_success_graphs")
View(return_vectors)
##start by getting a list of each unique condition
conditions = sort(unique(df$Condition))
for(condition in conditions){
##subset the data for that condition
subCondition = subset(df,df$Condition == condition)
##get a unique list of arrays in that condition
arrays = sort(unique(subCondition$Array))
for(array in arrays){
##subset the data for that specific array
subArray = subset(subCondition, subCondition$Array == array)
##get a unique list of strain names within that condition
strains = sort(unique(subArray$Gene))
for(strain in strains){
##subset the data for that specific strain
subStrain = subset(subArray, subArray$Gene == strain)
##get a unique list of spots
##each spot represents 1 technical replicate for that strain
spots = sort(unique(subStrain$Well))
for(spot in spots){
##data for all time points for a particular spot
subSpot = subset(subStrain, subStrain$Well == spot)
##sort by time point ascending
subSpot = subSpot[order(subSpot$Time.Point),]
##Turn values where size = 0 intonitial size = 1
##You can't have growth from a non-existent population so this causes model to fail
subSpot$Size[subSpot$Size == 0] = 1
##Run the functions to fit the model
##This will fill in the output vector with the data
##or with "OMIT" if an error is encountered
return_vectors = tryCatch(
normal_case(return_vectors,subSpot),
error = error_case)
}
}
}
}
##Note: These vectors are character so that the OMITS can be includeded
##add the output vectors as columns to the output data.frame
out_df$CC = return_vectors$CC
out_df$R = return_vectors$R
out_df$MinSize= return_vectors$MinSize
out_df$Corr = return_vectors$Corr
out_df = out_df[,c(1,2,3,5,7,8,9,10,11,12,13,14)]
View(out_df)
r = subset(old_out_df, Gene =="R")
r = subset(old_out_df, Condition %in% c("CSM_30","CSM_37","CSMEG_30", "CSMEG_37","SOE_30","SOE_37") & Gene =="R")
r = subset(old_out_df, !(Condition %in% c("CSM_30","CSM_37","CSMEG_30", "CSMEG_37","SOE_30","SOE_37") & Gene =="R"))
newdf = rbind(out_df,r)
View(newdf)
write.table(new_df,"final_logistic_growth.tab",row.names=F,sep="\t")
write.table(newdf,"final_logistic_growth.tab",row.names=F,sep="\t")
print("DONE")
require(ggplot2)
modeled_file = "final_logistic_growth.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#           Temp    Array(1-6)  Condition    Well
"character","character","character", "character")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
modeled_df = subset(modeled_df, modeled_df$CC != "OMIT")
##Now that "OMITS" are removed
#T#he vectors can be turned into numeric format
modeled_df$CC = as.numeric(modeled_df$CC)
modeled_df$R = as.numeric(modeled_df$R)
modeled_df$MinSize = as.numeric(modeled_df$MinSize)
modeled_df$Corr = as.numeric(modeled_df$Corr)
write.table(modeled_df, "logistic_growth.omit_errors.tab",sep="\t",row.names = F)
View(modeled_df)
modeled_file = "logistic_growth.omit_errors.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#           Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
####SET ARBITRARY CORRELATION CUTOFF
corr_cutoff = 0.95
modeled_df = subset(modeled_df, modeled_df$Corr > corr_cutoff)
write.table(modeled_df, "logistic_growth.omit_errors_lowcorr.tab",sep="\t",row.names = F)
library(dplyr)
library(grDevices)
modeled_file = "logistic_growth.omit_errors_lowcorr.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#           Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
outlierDF = data.frame(Gene = character(),
Media = factor(),
Temp = factor(),
Array = factor(),
Well = character())
arrays = sort(unique(modeled_df$Array))
conditions = sort(unique(modeled_df$Condition))
for(array in arrays){
subArray = subset(modeled_df, df$Array == array)
for(condition in conditions){
subCondition = subset(subArray, subArray$Condition == condition)
names = sort(unique(subCondition$Gene))
for(name in names){
block = subset(subCondition,subCondition$Gene == name)
#script fails if block has too few spots
#need to remove blocks with < cutoff spots
if(nrow(block) < 3){
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}else{
outliers_values <- as.list(boxplot.stats(block$R)$out)
block = subset(block, R %in% outliers_values)
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}
}
}
}
conditions = sort(unique(modeled_df$Condition))
for(condition in conditions){
subCondition = subset(modeled_df, Condition == condition)
names = sort(unique(subCondition$Gene))
for(name in names){
block = subset(subCondition,subCondition$Gene == name)
#script fails if block has too few spots
#need to remove blocks with < cutoff spots
if(nrow(block) < 3){
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}else{
outliers_values <- as.list(boxplot.stats(block$R)$out)
block = subset(block, R %in% outliers_values)
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}
}
}
outlier_removed_df = anti_join(modeled_df, outlierDF, by = c("Media" , "Temp", "Array", "Well"))
write.table(outlier_removed_df, "logistic_growth.omit_errors_lowcorr_outlierRate.tab",row.names = F, sep = "\t")
library(dplyr)
library(grDevices)
modeled_file = "logistic_growth.omit_errors_lowcorr_outlierRate.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
outlierDF = data.frame(Gene = character(),
Media = factor(),
Temp = factor(),
Array = factor(),
Well = character())
arrays = sort(unique(modeled_df$Array))
conditions = sort(unique(modeled_df$Condition))
for(array in arrays){
subArray = subset(modeled_df, modeled_df$Array == array)
for(condition in conditions){
subCondition = subset(subArray, subArray$Condition == condition)
names = sort(unique(subCondition$Gene))
for(name in names){
block = subset(subCondition,subCondition$Gene == name)
#script fails if block has too few spots
#need to remove blocks with < cutoff spots
if(nrow(block) < 3){
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}else{
outliers_values <- as.list(boxplot.stats(block$CC)$out)
block = subset(block, CC %in% outliers_values)
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}}
}
}
outlier_removed_df = anti_join(modeled_df, outlierDF, by = c("Media" , "Temp", "Array", "Well"))
write.table(outlier_removed_df, "logistic_growth.omit_errors_lowcorr_outlierRate_outlierMaxSize.tab",row.names = F, sep = "\t")
library(dplyr)
modeled_file = "logistic_growth.omit_errors_lowcorr_outlierRate_outlierMaxSize.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
arrays = sort(unique(modeled_df$Array))
conditions = sort(unique(modeled_df$Condition))
outlierDF = data.frame(Gene = character(),
Media = factor(),
Temp = factor(),
Array = factor(),
Well = character())
for(array in arrays){
subArray = subset(modeled_df, modeled_df$Array == array)
for(condition in conditions){
subCondition = subset(subArray, subArray$Condition == condition)
names = sort(unique(subCondition$Gene))
for(name in names){
block = subset(subCondition,subCondition$Gene == name)
#script fails if block has too few spots
#need to remove blocks with < cutoff spots
if(nrow(block) < 3){
block = block[,c(3,4,5,6,8)]
outlierDF = rbind(outlierDF,block)
}
}
}
}
outlier_removed_df = anti_join(modeled_df, outlierDF, by = c("Media" , "Temp", "Array", "Gene"))
write.table(outlier_removed_df, "logistic_growth.omit_errors_lowcorr_outlierRate_outlierMaxSize_under3Reps.tab",row.names = F, sep = "\t")
modeled_file = "logistic_growth.omit_errors_lowcorr_outlierRate_outlierMaxSize_under3Reps.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
modeled_df$SizeDiff = modeled_df$CC - modeled_df$MinSize
write.table(modeled_df,"logistic_growth.SizeDiff.tab",row.names=F,sep="\t")
View(modeled_df)
modeled_file = "logistic_growth.SizeDiff.tab"
classes = c("numeric","numeric","character","factor",
#Row        Col         Name      Media
"factor","factor",  "factor", "character",
#Temp    Array(1-6)  Condition    Well
"numeric","numeric","numeric", "numeric","numeric")
modeled_df = read.table(modeled_file,header=T, colClasses=classes,sep="\t")
normCC = vector(length = nrow(modeled_df))
normR = vector(length = nrow(modeled_df))
normSizeDiff = vector(length = nrow(modeled_df))
conditions = sort(unique(modeled_df$Condition))
View(modeled_df)
for(condition in conditions){
subCondition = subset(modeled_df,modeled_df$Condition == condition)
for(array in sort(unique(subCondition$Array))){
subArray = subset(subCondition, subCondition$Array == array)
subRef = subset(subArray, subArray$Gene == "R")
ref_CC_average = mean(subRef$CC)
ref_R_average = mean(subRef$R)
ref_SizeDiff_average = mean(subRef$SizeDiff)
for(strain in sort(unique(subArray$Gene))){
subStrain = subset(subArray, subArray$Gene == strain)
for(spot in sort(unique(subStrain$Well))){
#data for all time points for a particular spot
subSpot = subset(subStrain, subStrain$Well == spot)
CC_norm = subSpot$CC / ref_CC_average
normCC[modeled_df$Condition == condition &
modeled_df$Array == array &
modeled_df$Gene == strain &
modeled_df$Well == spot] = CC_norm
R_norm = subSpot$R / ref_R_average
normR[modeled_df$Condition == condition &
modeled_df$Array == array &
modeled_df$Gene == strain &
modeled_df$Well == spot] = R_norm
SizeDiff_norm = subSpot$SizeDiff / ref_SizeDiff_average
normSizeDiff[modeled_df$Condition == condition &
modeled_df$Array == array &
modeled_df$Gene == strain &
modeled_df$Well == spot] = SizeDiff_norm
}
}
}
}
modeled_df$Norm_CC = normCC
modeled_df$Norm_R = normR
modeled_df$Norm_SizeDiff = normSizeDiff
View(modeled_df)
write.table(modeled_df,"logistic_growth.normalized.tab",row.names=F,sep="\t")
